/*
                        [JOIN 용어 정리]

        오라클                         SQL 1999 표준(ANSI)

        등가 조인                      내부 조인(INNER JOIN)
                                        JOIN USING/ON
                                        + 자연 조인 (NATURAL JOIN, 등가 조인 방법 중 하나) : 오라클에서는 없는 표현 방식
                                        // 자연조인은 사용은 할 수 있으나 표현방식이 없는것
        

        포괄 조인                       왼쪽 외부 조인(LEFT OUTER JOIN)
                                        오른쪽 외부 조인 (RIGHT OUTER JOIN)
                                        전체 외부 조인 (FULL OUTER JOIN) --> 오라클 구문으로 사용 못함
                                        // 전체 외부 조인은 오라클에서 아예 사용조차 못함
        

        비등가 조인                      JOIN-ON
        자체 조인
        

        CARTESIAN PRODUCT               교차 조인(CROSS JOIN)
        (카티션 곱)        
*/

-----------------------------------------------------------------------------------------------------------------------------


-- JOIN
-- 하나 이상의 테이블에서 데이터를 조회하기 위해 사용하는 구문.
-- 수행 결과는 하나의 RESULT SET으로 나옴.

/*
- 관계형 데이터베이스에서 SQL을 이용한 테이블간의 '관계'를 맺는 방법.

- 관계형 데이터베이스(RDBMS)는 최소한의 데이터를 테이블에 담고 있어
원하는 정보를 테이블에서 조회해야 할 경우 하나 이상의 테이블에서 데이터를 읽어와야 하는 경우가 많음

이 때 무작정 데이터를 읽어오는 것이 아닌, 테이블 간의 연결고리로 관계가 맺어진 데이터를 추출해야 함
 --> 'JOIN'을 통해 이를 구현 가능
 
*/


-- ANSI 표준 구문
-- ANSI는 미국 국립 표준 협회를 뜻함
-- 미국의 산업표준을 제정하는 민간 단체로
-- 국제표준화기구 ISO에 가입되어있다.
-- ANSI에서 제정된 표준을 ANSI라고 하고, 여기서 제정한 표준 중 가장 유명한 것이 ASCII 코드이다.


-- 사번, 사원의 이름, 부서명을 모두 조회하기.

SELECT EMP_ID, EMP_NAME, DEPT_CODE
FROM EMPLOYEE;
-- 사번, 사원명은 EMPLOYEE 테이블에서만 조회 가능

SELECT DEPT_ID, DEPT_TITLE
FROM DEPARTMENT;
-- 부서명은 DEPARTMENT 테이블에서만 조회 가능

--> 부서 코드 (DEPT_ID, DEPT_CODE)는 두 테이블 모두 조회 가능 
-- 이때 같은 컬럼값을 가지고 조인을 하기 때문에 오라클에선 '등가 조인'이라고 한다

-- 1. 내부 조인(INNER JOIN, 오라클의 등가 조인(EQUAL JOIN))
--> 연결되는 컬럼의 값이 일치하는 행들만 조인됨
-- (일치하는 값이 없는 행은 조인에서 제외됨)

-- 오라클 전용 구문
-- FROM절에 ','(콤마)로 구분하여 합칠 테이블명을 기술하고
-- WHERE절에 합치기에 사용될 컬럼명을 명시

-- 1) 연결에 사용될 두 컬럼명이 다른 경우
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID;

-- 2) 연결에 사용할 두 컬럼명이 같은 경우
-- 사번, 이름, 직급명 조회

SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE, JOB
WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

-- 3) 별칭 사용
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE;

-------------------------------------------------------------------------------------------------------------------------------

-- ANSI 표준 구문
-- 1) 연결에 사용할 컬럼명이 다를 경우
    --> JOIN ON() 구문 사용
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);


-- 2) 연결에 사용할 컬럼명이 같은 경우
    --> JOIN USING() 사용
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE);



-- 부서별 지역명 조회

--  오라클 전용 구문
SELECT DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT, LOCATION
WHERE LOCATION_ID = LOCAL_CODE;


--  ANSI 전용 구문
SELECT DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);


------------------------------------------------------------------------------------------------------------------------

-- 2. 외부 조인 (OUTER JOIN)

-- 두 테이블의 지정하는 컬럼값이 일치하지 않는 행도 조인 결과에 포함시킴
-- 반드시 OUTER JOIN임을 명시해야 함.

-- INNER JOIN, OUTER JOIN을 비교할 쿼리문

SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT DEPT_ID FROM DEPARTMENT;


-- 1) LEFT [OUTER] JOIN
-- 합치기에 사용된 두 테이블 중 왼편에 기술된 테이블의 컬럼 수를 기준으로 JOIN 진행

-- ANSI 표준 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
LEFT OUTER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

-- 오라클 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID (+);
-- 왼쪽에 기술된 컬럼을 기준으로 컬럼값을 추가하겠다


-- 2) RIGHT [OUTER] JOIN
-- 합치기에 사용한 두 테이블 중 오른편에 기술된 테이블의 컬럼 수를 기준으로 JOIN

-- ANSI 표준 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
RIGHT OUTER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- DEPARTMENT 테이블에서 아무 관계가 맺어져 있지 않은 해외 영업 3부, 마케팅부, 국내 영업부가 마지막에 추가됨

SELECT DEPT_ID, DEPT_TITLE
FROM DEPARTMENT;

SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM DEPARTMENT
RIGHT OUTER JOIN EMPLOYEE ON (DEPT_CODE = DEPT_ID);
-- 기준이 되는 테이블 순서에 따라서 LEFT, RIGHT JOIN의 결과가 같을 수 있음.


-- 오라클 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM DEPARTMENT, EMPLOYEE
WHERE DEPT_CODE (+) = DEPT_ID;



-- 3) FULL [OUTER] JOIN
-- 합치기에 사용한 두 테이블이 가진 모든 행을 결과에 포함시키는 조인

-- ANSI 표준 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
FULL OUTER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

-- 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEAPARTMENT
WHERE DEPT_CODE (+) = DEPT_ID (+);
--> 오라클 전용 구문은 FULL OUTER JOIN 사용 못함 (어디가 기준이 되어 +를 실행해야 하는지 모름)

------------------------------------------------------------------------------------------------------------------------


-- 3. 교차 조인 (CROSS JOIN, 오라클에서는 CARTESIAN PRODUCT)
-- 조인되는 테이블의 각 행들이 모두 매핑된 데이터가 조회됨 (곱집합)
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
CROSS JOIN DEPARTMENT -- ON/USING 같은거 사용 X
ORDER BY 2;
-- 빅데이터, 인공지능 등의 데이터 기반 확률 계산 시 많이 사용
-- 모든 경우의 수를 알 수 있기 때문

------------------------------------------------------------------------------------------------------------------------

-- 4. 비등가 조인 (NON EQUAL JOIN)
--// 비등가 : 같지 않다(!=)가 아니고 '등가 조인이 아닌' 다른 조인
-- '='(등호)를 사용하지 않는 조인
-- 지정한 컬럼 값이 일치하는 경우가 아니라 값의 범위에 포함되는 행들을 연결하는 조인
-- 문자열은 범위를 지정하기가 애매하기 때문에 보통 컬럼값이 숫자인 경우에 주로 사용한다

-- 사원명, 급여, 급여 등급 조회
-- 사원의 급여에 따라 알맞은 급여등급으로 조회할 것

SELECT EMP_NAME, SALARY, E.SAL_LEVEL
FROM EMPLOYEE E
JOIN SAL_GRADE S ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);

------------------------------------------------------------------------------------------------------------------------

-- 5. 자체 조인 (SELF JOIN)
-- // 개념적으로는 내 테이블을 하나 복사해서 그거랑 조인한다고 생각하면 쉬움

-- 사번, 이름, 부서코드, 관리자 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE, MANAGER_ID
FROM EMPLOYEE;


-- ANSI 표준 구문
SELECT E.EMP_ID, E.EMP_NAME, E.DEPT_CODE, E.MANAGER_ID, M.EMP_NAME
FROM EMPLOYEE E
/*LEFT/RIGHT*/ JOIN EMPLOYEE M ON (E.MANAGER_ID = M.EMP_ID);

-- 오라클 전용 구문
SELECT E.EMP_ID, E.EMP_NAME, E.DEPT_CODE, E.MANAGER_ID, M.EMP_NAME
FROM EMPLOYEE E, EMPLOYEE M
WHERE E.MANAGER_ID = M.EMP_ID;

------------------------------------------------------------------------------------------------------------------------

-- 6. 자연 조인 (NATURAL JOIN)
-- 동일한 타입과 이름을 가진 컬럼이 있는 테이블들 간의 조인 시
-- 조인 구문을 간단히 표현한 방법

-- * 조건: 반드시 두 테이블간의 동일한 컬럼명, 타입을 가진 컬럼이 필요
--> 없을 경우 대신 교차조인이 발생함.
SELECT EMP_NAME, JOB_NAME
FROM EMPLOYEE E
JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE);

SELECT EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE);

SELECT EMP_NAME, JOB_NAME
FROM EMPLOYEE
NATURAL JOIN JOB;


------------------------------------------------------------------------------------------------------------------------

-- 7. 다중 조인
-- N개의 테이블들을 조인하여 조회할 경우 조인 순서가 매우 중요함!

-- 사번, 사원명, 부서코드, 부서명, 지역명

-- ANSI 표준 구문
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
LEFT JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID);

-- 조인 순서를 지키지 않은 경우
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID)
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- FROM 절에서 JOIN 발생 시 위에서부터 차례대로 JOIN을 한번 실행할 때마다
-- RESULT SET이 새롭게 만들어짐 - (## RESULT SET을 테이블로 취급 가능 ##)
-- ㄴ 이 개념을 항상 생각하면서 JOIN 할 것
-- 그래서, 조인 관계가 제대로 맺어지지 않은 상태로 없는 컬럼 접근 시 에러 발생


-- 사원 중 누락된 하동운, 이오리도 조회 결과에 포함해서 조회하기
-- (즉, 다중 조인에서 OUTER JOIN 하는 방법)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
LEFT JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID);
-- 위에 한번만 LEFT했을 경우 또 생성된 RESULT SET이 새로운 테이블이 되므로
-- 다음에서 또 LEFT OUTER JOIN 해줘야 원하는 결과 얻음.


-- 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION
WHERE DEPT_CODE = DEPT_ID
AND LOCATION_ID = LOCAL_CODE;

-- 직급이 대리이면서 아시아 지역에 근무하는 직원 조회
-- 사번, 이름, 직급명, 부서명, 근무지역명, 급여를 조회하세요

-- ANSI 전용 구문
SELECT EMP_ID, EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
-- 또는 NATURAL JOIN JOB
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID)
WHERE JOB_NAME = '대리'
AND LOCAL_NAME LIKE 'ASIA%';


-- 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME, SALARY
FROM EMPLOYEE E, JOB J, DEPARTMENT D, LOCATION
WHERE E.JOB_CODE = J.JOB_CODE
AND DEPT_CODE = DEPT_ID
AND LOCAL_CODE = LOCATION_ID
AND JOB_NAME = '대리'
AND LOCAL_NAME LIKE 'ASIA%';






