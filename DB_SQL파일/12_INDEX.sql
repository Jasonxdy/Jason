

-- INDEX

-- SQL 문의 처리 속도를 향상시키기 위해서 컬럼에 대해 생성하는 오라클 '객체'

-- 1. 인덱스 생성 방법
/*
    
    [표현식]
    
    CREATE [UNIQUE] INDEX 인덱스명
    ON 테이블명(컬럼명, 컬럼명, 컬럼명, ... | 함수명, 함수계산식)
    
*/

-- 사용자가 정의한 인덱스를 관리하는 데이터 딕셔너리
SELECT * FROM USER_IND_COLUMNS;

-- 인덱스는 위 표현식으로 일일히 생성 가능하지만
-- PRIMARY KEY, UNIQUE 제약조건 설정 시 자동으로 같이 생성됨

--------------------------------------------------------------------------------------------------------------------------------


-- 2. 인덱스 구조

/*
    ROWID : DB 내 데이터 공유 주소,
            ROWID를 이용하여 데이터 접근 가능
    
    1 ~ 6번째 : 데이터 오브젝트 (객체) 번호
    7 ~ 9번째 : 파일 번호  // 눈에는 보이지 않지만 DB 내에 파일로 묶여서 존재
    10 ~ 15번째 : BLOCK 번호
    16 ~ 18번째 : ROW 번호
*/


SELECT ROWID, EMP_ID, EMP_NAME
FROM EMPLOYEE;


--------------------------------------------------------------------------------------------------------------------------------


-- 3. INDEX의 원리
/*
    인덱스는 MAP 형식으로 구성이 되어 있음.    // 자바에서의 MAP처럼 KEY & VALUE
    KEY = 지정한 컬럼
    VALUE = ROWID    // 주소를 찾아가면 그 행의 모든 정보에 접근할 수 있음
*/

-- 인덱스를 활용한 검색
-- WHERE절 조건에 인덱스가 부여된 컬럼을 사용함
SELECT EMP_ID, EMP_NAME FROM EMPLOYEE
WHERE EMP_ID = 201;
-- 인덱스를 활용하는 경우 -> 바로 인덱스로 직행해서 행을 읽지만
-- 인덱스를 활용하지 않는 경우 -> 위에서부터 차례대로 비교하면서 내려옴 (아니네, 아니네, .., 맞네)

/*
EMP_ID는 PRIMARY KEY 이므로 인덱스가 자동으로 생성되어 있음.

INDEX가 설정되어있는 컬럼을 WHERE절 조건으로 활용하면
해당 조건을 만족하는 컬럼을 바로 찾아가서 조회하게 됨.

만약 INDEX가 설정되지 않은 컬럼을 조건으로 하여 검색하면 해당 조건을 만족하는
컬럼을 찾기 위해 테이블의 모든 행을 검사하게 됨 (FULL SCAN).
--> 속도 저하 발생

*/


























